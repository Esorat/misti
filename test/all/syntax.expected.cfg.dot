digraph "syntax" {
    node [shape=box];
    subgraph "cluster_test_try" {
        label="test_try";
        "test_try_68" [label="try"];
        "test_try_69" [label="a += 1"];
        "test_try_70" [label="try"];
        "test_try_71" [label="try ... catch (err)"];
        "test_try_72" [label="a = 19",style=filled,fillcolor="#66A7DB"];
        "test_try_73" [label="dump(err)",style=filled,fillcolor="#66A7DB"];
        "test_try_68" -> "test_try_69";
        "test_try_69" -> "test_try_70";
        "test_try_70" -> "test_try_71";
        "test_try_71" -> "test_try_72";
        "test_try_71" -> "test_try_73";
    }
    subgraph "cluster_test_loops" {
        label="test_loops";
        "test_loops_74" [label="let sum: Int = 0"];
        "test_loops_75" [label="let i: Int = 0"];
        "test_loops_76" [label="while (i < 10)"];
        "test_loops_77" [label="i = i + 1"];
        "test_loops_78" [label="sum = sum + i"];
        "test_loops_79" [label="until (i > 10)"];
        "test_loops_80" [label="i = i - 1"];
        "test_loops_81" [label="sum = sum + i"];
        "test_loops_82" [label="repeat (10)"];
        "test_loops_83" [label="i = i + 1"];
        "test_loops_84" [label="sum = sum + i"];
        "test_loops_85" [label="let m: map<Int, Int> = emptyMap()"];
        "test_loops_86" [label="foreach ((k, v) of m)"];
        "test_loops_74" -> "test_loops_75";
        "test_loops_75" -> "test_loops_76";
        "test_loops_76" -> "test_loops_77";
        "test_loops_77" -> "test_loops_78";
        "test_loops_78" -> "test_loops_76";
        "test_loops_76" -> "test_loops_79";
        "test_loops_79" -> "test_loops_80";
        "test_loops_80" -> "test_loops_81";
        "test_loops_81" -> "test_loops_79";
        "test_loops_79" -> "test_loops_82";
        "test_loops_82" -> "test_loops_83";
        "test_loops_83" -> "test_loops_84";
        "test_loops_84" -> "test_loops_82";
        "test_loops_82" -> "test_loops_85";
        "test_loops_85" -> "test_loops_86";
        "test_loops_86" -> "test_loops_86";
    }
    subgraph "cluster_testTryCatch" {
        label="testTryCatch";
        "testTryCatch_87" [label="try ... catch (err)"];
        "testTryCatch_88" [label="a += 1",style=filled,fillcolor="#66A7DB"];
        "testTryCatch_89" [label="dump(err)",style=filled,fillcolor="#66A7DB"];
        "testTryCatch_87" -> "testTryCatch_88";
        "testTryCatch_87" -> "testTryCatch_89";
    }
    subgraph "cluster_testLoops" {
        label="testLoops";
        "testLoops_90" [label="let sum: Int = 0"];
        "testLoops_91" [label="let i: Int = 0"];
        "testLoops_92" [label="while (i < 10)"];
        "testLoops_93" [label="i = i + 1"];
        "testLoops_94" [label="sum = sum + i"];
        "testLoops_95" [label="until (i <= 0)"];
        "testLoops_96" [label="i = i - 1"];
        "testLoops_97" [label="sum = sum + i"];
        "testLoops_98" [label="repeat (10)"];
        "testLoops_99" [label="i = i + 1"];
        "testLoops_100" [label="sum = sum + i"];
        "testLoops_101" [label="let m: map<Int, Int> = emptyMap()"];
        "testLoops_102" [label="m.set(1, 10)"];
        "testLoops_103" [label="m.set(2, 20)"];
        "testLoops_104" [label="m.set(3, 30)"];
        "testLoops_105" [label="foreach ((key, value) of m)"];
        "testLoops_106" [label="sum = sum + value"];
        "testLoops_90" -> "testLoops_91";
        "testLoops_91" -> "testLoops_92";
        "testLoops_92" -> "testLoops_93";
        "testLoops_93" -> "testLoops_94";
        "testLoops_94" -> "testLoops_92";
        "testLoops_92" -> "testLoops_95";
        "testLoops_95" -> "testLoops_96";
        "testLoops_96" -> "testLoops_97";
        "testLoops_97" -> "testLoops_95";
        "testLoops_95" -> "testLoops_98";
        "testLoops_98" -> "testLoops_99";
        "testLoops_99" -> "testLoops_100";
        "testLoops_100" -> "testLoops_98";
        "testLoops_98" -> "testLoops_101";
        "testLoops_101" -> "testLoops_102";
        "testLoops_102" -> "testLoops_103";
        "testLoops_103" -> "testLoops_104";
        "testLoops_104" -> "testLoops_105";
        "testLoops_105" -> "testLoops_106";
        "testLoops_106" -> "testLoops_105";
    }
    subgraph "cluster_TestContract__getter" {
        label="TestContract__getter";
        "TestContract__getter_107" [label="return 0",style=filled,fillcolor="#66A7DB"];
    }
    subgraph "cluster_TestContractF__test" {
        label="TestContractF__test";
    }
    subgraph "cluster_TestContractT__test" {
        label="TestContractT__test";
        "TestContractT__test_108" [label="return self.getA()",style=filled,fillcolor="#66A7DB"];
    }
    subgraph "cluster_TestContractT__receive_external_fallback_1722" {
        label="TestContractT__receive_external_fallback_1722";
    }
    subgraph "cluster_EffectTestContract__init_1942" {
        label="EffectTestContract__init_1942";
        "EffectTestContract__init_1942_109" [label="self.destAddress = sender()",style=filled,fillcolor="#66A7DB"];
    }
    subgraph "cluster_EffectTestContract__funcWithSend" {
        label="EffectTestContract__funcWithSend";
        "EffectTestContract__funcWithSend_110" [label="let amount: Int = 100"];
        "EffectTestContract__funcWithSend_111" [label="send(SendParameters{to: self.destAddress, value: amount})",style=filled,fillcolor="#66A7DB"];
        "EffectTestContract__funcWithSend_110" -> "EffectTestContract__funcWithSend_111";
    }
    subgraph "cluster_EffectTestContract__funcWithStateRead" {
        label="EffectTestContract__funcWithStateRead";
        "EffectTestContract__funcWithStateRead_112" [label="let value: Int = self.someVariable",style=filled,fillcolor="#66A7DB"];
    }
    subgraph "cluster_EffectTestContract__funcWithStateWrite" {
        label="EffectTestContract__funcWithStateWrite";
        "EffectTestContract__funcWithStateWrite_113" [label="self.someVariable = 42",style=filled,fillcolor="#66A7DB"];
    }
    subgraph "cluster_EffectTestContract__funcWithDatetimeAccess" {
        label="EffectTestContract__funcWithDatetimeAccess";
        "EffectTestContract__funcWithDatetimeAccess_114" [label="let currentTime: Int = now()",style=filled,fillcolor="#66A7DB"];
    }
    subgraph "cluster_EffectTestContract__funcWithRandomnessUse" {
        label="EffectTestContract__funcWithRandomnessUse";
        "EffectTestContract__funcWithRandomnessUse_115" [label="let randValue: Int = random(1, 100)",style=filled,fillcolor="#66A7DB"];
    }
    subgraph "cluster_EffectTestContract__funcWithRandomnessSeedInit" {
        label="EffectTestContract__funcWithRandomnessSeedInit";
        "EffectTestContract__funcWithRandomnessSeedInit_116" [label="self.randomnessSeed = seed",style=filled,fillcolor="#66A7DB"];
    }
    subgraph "cluster_EffectTestContract__generatePseudoRandom" {
        label="EffectTestContract__generatePseudoRandom";
        "EffectTestContract__generatePseudoRandom_117" [label="self.randomnessSeed = (self.randomnessSeed * 1103515245 + 12345) % pow(2, 31)"];
        "EffectTestContract__generatePseudoRandom_118" [label="return self.randomnessSeed",style=filled,fillcolor="#66A7DB"];
        "EffectTestContract__generatePseudoRandom_117" -> "EffectTestContract__generatePseudoRandom_118";
    }
    subgraph "cluster_EffectTestContract__funcWithMultipleEffects" {
        label="EffectTestContract__funcWithMultipleEffects";
        "EffectTestContract__funcWithMultipleEffects_119" [label="self.someVariable += random(1, 100)"];
        "EffectTestContract__funcWithMultipleEffects_120" [label="send(SendParameters{to: self.destAddress, value: self.someVariable})"];
        "EffectTestContract__funcWithMultipleEffects_121" [label="let time: Int = now()"];
        "EffectTestContract__funcWithMultipleEffects_122" [label="self.funcWithRandomnessSeedInit(time)",style=filled,fillcolor="#66A7DB"];
        "EffectTestContract__funcWithMultipleEffects_119" -> "EffectTestContract__funcWithMultipleEffects_120";
        "EffectTestContract__funcWithMultipleEffects_120" -> "EffectTestContract__funcWithMultipleEffects_121";
        "EffectTestContract__funcWithMultipleEffects_121" -> "EffectTestContract__funcWithMultipleEffects_122";
    }
"119" -> "26";
"120" -> "35";
}
